#+title: GENERATOR: an iteration library for Common Lisp
#+author: Phoebe Goldman

GENERATOR is a Common Lisp library inspired by Python's, and to a lesser extent Rust's,
Iterator interfaces.

* FAQ
or rather, Questions I Thought Of

** Why not name it "ITERATOR", if it's inspired by Python's Iterator?
That's a name conflict with [[https://common-lisp.net/project/iterate/][ITERATE]], a popular library which I use frequently.

** What is a generator?
A ~generator~ is an opaque object which represents an ordered sequence of
values. Generators support a single primitive operation, ~generator-next~, which grabs the
next element of a generator. Calling ~generator-next~ on a generator which has no more
elements will signal a condition. This library provides several operators for consuming
generators which handle that condition appropriately.

** How are generators represented internally?
Don't depend on this, but a generator is just a function of zero arguments.

** Why is this README so short and uninformative?
Because this library is very new, and frankly not ready for the big times.

** Why don't you have any tests?
Because I'm a bad software developer.

** Why don't you have any documentation?
See the previous question.

** I'm an old curmudgeon. Can you justify this library in terms that made sense when I got my degree 60 years ago?

This is an attempt to reinvent [[https://www.cliki.net/Series][Series]], a Common Lisp lazy streams library which existed
long before I was born. Series is a fascinating and powerful package, but it's also
somewhat arcane and unnreadable. A lot of that is due to the fact that (as far as I can
tell) Series predates optimizing Common Lisp compilers, so it uses a bunch of horrible
macros to do what I can do with simple ~inline~ declarations on functions.

** Is this library as efficient as Series?

That's a great question! Someone should do some experiments using ~time~ or ~sb-sprof~ to
compare the two libraries.

